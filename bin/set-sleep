#!bin/bash
# A short description of the script goes here.
#
# Usage:
#  - <command> [OPTION] [ARG]
#
#   ____  ____  ____  ____
#  ||i  |||o  |||d  |||s  |
#  ||___|||___|||___|||___|
#  |/___\|/___\|/_ _\|/___\
#
# Version 00.1.2 [2022-10-31]
# Based on the Google Style Guide: https://google.github.io/styleguide/shell.xml

if ! (return 0 2> /dev/null); then
  # now these will only get enabled if not sourced
  set -o errexit  # exit on most errors (get description)
  set -o nounset  # exit on expansion of unset variables (get description)
  set -o pipefail # use last non-zero exit code in a pipeline (get description)
fi

# ensures the trap handler is inherited or it wont work as expected
set -o errtrace

function usage() {
  local script_name
  script_name="$(basename "$0")"

  cat >&2 <<-EOF

  Command: ${script_name}
  Description: Returns what process is the owner of a provided port.

  Usage:
    ${script_name} [PORT]

  Available Options:
    -h, --help              Print this help menu.
    -v|vv|vvv, --verbose    Increase the verbosity of messages.

  Help:
    Check for ports that are taken when trying to run Magento.

      whohas 8080

    Make sure you have System Preferences closed to not overwrite options.

EOF
  exit 1
}

function err() {

}

function func_one() {}

function main() {
  case "${1-}" in
    -h | --help) usage
    ;;
    *) func_one ;;
  esac
}

main "$@"

#####################
## tsleep - Time Sleep for OS X Systems
##
## Wait a specified amount of hours, minutes, and seconds. Then, sleep the system.
##
## Example Usage:
## user@osxhost$ tsleep 3m 4H 400s 70m
## System will sleep in : 5h:19m:39s
##
#####################

#
_hms()
{
    local S=${1}
    ((h=S/3600))
    ((m=S%3600/60))
    ((s=S%60))
    printf "%dh:%dm:%ds\n" $h $m $s
}

countdown ()
{
    if [[ $1 = *[![:digit:]]* ]]; then
        echo "Usage: countdown (seconds) [label]";
        return;
    fi;

    message=$2
    if [ "x$message" == "x" ]; then
        message="Remaining Time"
    fi

    local t=$1 remaining=$1;
    SECONDS=0;
    while sleep .2; do
        printf '\r'"$message"': '"`_hms $remaining`"' ';
        if (( (remaining=t-SECONDS) <=0 )); then
            break;
        fi;
    done
    printf '\rCountdown complete.                        \n';
}

max_seconds=0

while [[ $# -gt 0 ]]; do
    _scale=${1//[0-9]/}
    _time=${1//[^0-9]/}
    case $_scale in
        [Hh] ) (( max_seconds=max_seconds+(60*60*$_time) )); ;;
        [Mm] ) (( max_seconds=max_seconds+(60*$_time) )); ;;
        [Ss] ) (( max_seconds=max_seconds+($_time) )); ;;
        "" ) (( max_seconds=max_seconds+($_time) )); ;;
        ? ) echo "Nerds! Invalid time scale specified. ($1)" && exit 1;;
    esac
    shift
done

countdown $max_seconds "System will sleep in "
osascript -e 'tell application "System Events" to sleep'
