[advice]
    statusHints = false
[alias]

	# View abbreviated SHA, description, and history graph of the latest 20 commits
	l = log --pretty=oneline -n 20 --graph --abbrev-commit

	# View the current working tree status using the short format
	s = status -s

	# Show the diff between the latest commit and the current state
	d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"

	# `git di $number` shows the diff between the state `$number` revisions ago and the current state
	di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"

	# Pull in remote changes for the current repository and all its submodules
	p = !"git pull; git submodule foreach git pull origin master"

	# Checkout a pull request from origin (of a github repository)
	pr = !"pr() { git fetch origin pull/$1/head:pr-$1; git checkout pr-$1; }; pr"

	# Clone a repository including all submodules
	c = clone --recursive

	# Commit all changes
	ca = !git add -A && git commit -av

	# Switch to a branch, creating it if necessary
	go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"

	# Color graph log view
	graph = log --graph --color --pretty=format:"%C(yellow)%H%C(green)%d%C(reset)%n%x20%cd%n%x20%cn%x20(%ce)%n%x20%s%n"

	# Show verbose output about tags, branches or remotes
	tags = tag -l
	branches = branch -a
	remotes = remote -v

	# Amend the currently staged files to the latest commit
	amend = commit --amend --reuse-message=HEAD

	# Credit an author on the latest commit
	credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"

	# Interactive rebase with the given number of latest commits
	reb = "!r() { git rebase -i HEAD~$1; }; r"

	# Find branches containing commit
	fb = "!f() { git branch -a --contains $1; }; f"

	# Find tags containing commit
	ft = "!f() { git describe --always --contains $1; }; f"

	# Find commits by source code
	fc = "!f() { git log --pretty=format:'%C(yellow)%h	%Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"

	# Find commits by commit message
	fm = "!f() { git log --pretty=format:'%C(yellow)%h	%Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

	# Remove branches that have already been merged with master
	# a.k.a. ‘delete merged’
	dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d; git remote -v update -p"

	# List contributors with number of commits
	contributors = shortlog --summary --numbered

	lg = log --color --decorate --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an (%G?)>%Creset' --abbrev-commit

	mdiff = "!f() { git stash | head -1 | grep -q 'No local changes to save'; x=$?; git merge --no-commit $1 &>/dev/null; git add -u &>/dev/null; git diff --staged; git reset --hard &>/dev/null; test $x -ne 0 && git stash pop &>/dev/null; }; f"

	# Codereview aliases
	change = codereview change
	gofmt = codereview gofmt
	mail = codereview mail
	pending = codereview pending
	submit = codereview submit
	sync = codereview sync

	# from seth vargo https://gist.github.com/sethvargo/6b2f7b592853381690bfe3bd00947e8f
	unreleased = "!f() { git fetch --tags && git diff $(git tag | tail -n 1); }; f"
	up = !git pull origin master && git remote prune origin && git submodule update --init --recursive
	undo = !git reset HEAD~1 --mixed
	top = !git log --format=format:%an | sort | uniq -c | sort -r | head -n 20

	# from trevor bramble https://twitter.com/TrevorBramble/status/774292970681937920
	alias=!git config -l | grep ^alias | cut -c 7- | sort

	# from myles borins https://github.com/TheAlphaNerd/Dot-files/blob/master/.gitconfig
	# github broke some workflow... this will make it less painful
	patchit = "!f() { echo $1.patch | sed s_pull/[0-9]*/commits_commit_ | xargs curl -L | git am --whitespace=fix; }; f"
	# patchit = "!f() { curl -L $1.patch | git am --whitespace=fix; }; f"
	patchit-please = "!f() { echo $1.patch | sed s_pull/[0-9]*/commits_commit_ | xargs curl -L | git am -3 --whitespace=fix; }; f"
	# patchit-please = "!f() { curl -L $1.patch | git am -3 --whitespace=fix; }; f"

[apply]

	# Detect whitespace errors when applying a patch
	whitespace = fix

[core]

	# Use custom `.gitignore` and `.gitattributes`
	excludesfile = ~/.gitignore
	attributesfile = ~/.gitattributes

	# Treat spaces before tabs and all kinds of trailing whitespace as an error
	# [default] trailing-space: looks for spaces at the end of a line
	# [default] space-before-tab: looks for spaces before tabs at the beginning of a line
	whitespace = space-before-tab,-indent-with-non-tab,trailing-space

	# Make `git rebase` safer on OS X
	# More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
	trustctime = false
	editor = vim

[color]

	# Use colors in Git commands that are capable of colored output when
	# outputting to the terminal. (This is the default setting in Git ≥ 1.8.4.)
	ui = auto

[color "branch"]

	current = yellow reverse
	local = yellow
	remote = green

[color "diff"]

	meta = yellow bold
	frag = magenta bold # line info
	old = red # deletions
	new = green # additions

[color "status"]

	added = yellow
	changed = green
	untracked = cyan

[diff]

	# Detect copies as well as renames
	renames = copies

[help]

	# Automatically correct and execute mistyped commands
	autocorrect = 1

[merge]

	# Include summaries of merged commits in newly created merge commit messages
	log = true

[push]
	# change to maching for machines with older versions of git 1.x.x
	default = simple

[url "git@github.com:github"]

	insteadOf = "https://github.com/github"
	insteadOf = "github:github"
	insteadOf = "git://github.com/github"

[url "git@github.com:"]

	pushInsteadOf = "https://github.com/"
	pushInsteadOf = "github:"
	pushInsteadOf = "git://github.com/"

[url "git://github.com/"]

	insteadOf = "github:"

[url "git@gist.github.com:"]

	insteadOf = "gst:"
	pushInsteadOf = "gist:"
	pushInsteadOf = "git://gist.github.com/"

[url "git://gist.github.com/"]

	insteadOf = "gist:"

# Uncomment if you want fetch to also get all github pull requests, this is rather
# large on big repos.
#[remote "origin"]
	#fetch = +refs/pull/*/head:refs/remotes/origin/pull/*

[commit]
	gpgsign = true
[pull]
	rebase = true
[alias]
	who = shortlog -s -n --no-merges
	standup = shortlog --since=yesterday
	today = shortlog --since=midnight
	uncommit = reset HEAD^
	unamend = reset --soft HEAD@{1}
	hist = for-each-ref --count=10 --sort=-committerdate --format='%(refname:short)' refs/heads/
	redate = commit --amend --date=now --no-edit
# command aliases for git (handled separately of bash aliases)
# aliases prefaced with a ! will be treated as commands
# add the git helpers aliases too
[alias]
    aa = add --all .
    amend = commit --amend --reuse-message=HEAD


[alias]
  # View abbreviated SHA, description, and history graph of the latest 20 commits
  l = log --graph --abbrev-commit --decorate=no --date=format:'%Y-%m-%d %H:%I:%S' --format=format:'%C(03)%>|(16)%h%C(reset)  %C(04)%ad%C(reset)  %C(green)%<(16,trunc)%an%C(reset)  %C(bold 1)%d%C(reset) %C(bold 0)%>|(1)%s%C(reset)'

  # Show the diff between the latest commit and the current state
  d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"

  # `git di $number` shows the diff between the state `$number` revisions ago and the current state
  di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"

  # Checkout a pull request from origin (of a github repository)
  pr = !"pr() { git fetch origin pull/$1/head:pr-$1; git checkout pr-$1; }; pr"

  # Clone a repository including all submodules
  c = clone --recursive

  # Commit all changes
  ac = !git add -A && git commit -av

  # Commit and push all
  #cap = !git add -A && git commit -av && git push
  acp = "!f() { git add -A; if [ ! -z \"$1\" ]; then git commit -av -m \"$1\"; else git commit -av; fi; git pull; git push; }; f"

  # Amend the currently staged files to the latest commit
  amend = commit --amend --reuse-message=HEAD

  lg = log --color --decorate --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an (%G?)>%Creset' --abbrev-commit

  s = status -s
  st = status --ignore-submodules=dirty
  df = diff --ignore-submodules=dirty
  co = checkout
  ci = commit
  lg = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit

  upstream = !"u() { git checkout master; git pull --rebase upstream master; }; u"



    # get description
    branches = branch -avv
    br = branch
    brr = branch --sort=-committerdate
    bump = "commit --allow-empty -m 'CI bump'"
    buu = branch --unset-upstream

    # get description
    cam = commit -am
    ci = commit
    civ = commit -v
    co = checkout
    contrib = shortlog --summary --numbered
    cp = cherry-pick
    cr = clone --recursive

    # get description
    dc = diff --cached
    deleted = '!git ls-files --deleted'
    df = diff --color --color-words --abbrev
    dfw = diff --word-diff
    dfn = diff --name-only
    dfno = diff --name-only origin/master
    disregard = update-index --assume-unchanged
    dissused = '!git ls-files -v | grep ^[a-z] || echo "None"'

    f = fetch --tags --force --prune

	g = grep --break --heading --line-number
    graph = log --graph --full-history --date=short --color --date-order --pretty=tformat:"%x1b[31m%h%x09%x1b[32m%d%x1b[0m%x20%s%x20%x1b[33m(%an)%x1b[0m%x20%x1b[31m(%aD)"

    # get description
    head = "!git r -1"

    # ignore untracked files in this specific repo
    is-it-just-me = "!$EDITOR .git/info/exclude"

    # get description
    l = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit
    ll = log --pretty=oneline --graph --abbrev-commit
    ld = "!sh -c \"git log --since '${1:-1} days ago' --oneline --author $(git config user.email)\" -"
    lg = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --
    lgp = log -p
    lgs = log --stat
    lm = log --pretty=format:'* %s (%h)'
    lol = log --graph --decorate --pretty=oneline --abbrev-commit
    lola = log --graph --decorate --pretty=oneline --abbrev-commit --all
    ls = ls-files
    lt = "!git tag | sort -n -t. -k1,1 -k2,2 -k3,3"

    modified = '!git ls-files --modified'
    mov = branch -m

    new = untracked

    # TODO: get description
    patch = '!git --no-pager diff --no-color'
    pro = '!hub pr show || hub browse'
    p = push
	pf = push --force
    pr = "!f() { git fetch -fu ${2:-origin} refs/pull/$1/head:pr/$1 && git checkout pr/$1; }; f"

    r = "!GIT_NO_PAGER=1 git log"
    regard = update-index --no-assume-unchanged
    ri = rebase -i
    rio = '!git f && git rebase -i origin/master'

    # view the working tree in short format
    s = status -s
    show-ignored = "! git clean -ndX | perl -pe 's/Would remove/Ignored:/'"
    skip = update-index --skip-worktree
    skipped = !git ls-files -v | grep \"^S\"
    stag = "!git tag | sort -n -t. -k1,1 -k2,2 -k3,3 -k4,4"
	stl = ls-files -m -o --exclude-standard
	sts = status -sb

    # get description
    unskip = update-index --no-skip-worktree
    unstage = reset --hard HEAD
    untracked = '!git ls-files --others --exclude-standard'
    up = "!git fetch --tags --force --prune && hub sync"

    # show the email for the current repository
    whoami = config user.email
    wipe = '!git reset --hard HEAD && git clean -fd'



[color]
    branch = auto
    diff = auto
    interactive = auto
    pager = auto
    status = auto
    # ui = true
    ui = auto
[color "branch"]
    current = yellow reserve
    local = yellow
    remote = green
[color "diff"]
    meta = yellow bold
	frag = magenta bold
	old = red bold
	new = green bold
[color "diff-highlight"]
	oldNormal = red bold
	oldHighlight = red bold 52
	newNormal = green bold
	newHighlight = green bold 22
[color "status"]
	added = yellow
	changed = green
	untracked = cyan



[commit]
    # gpgsign = true
    status = false
    template = ~/.config/.gitmessage



[core]
    attributesFile = ~/.config/git/attributes
    autocrlf = input
    editor = vim # ? code --wait
    excludesfile = $HOME/.config/git/ignoretemplate
    filemode = false
    ignorecase = false
    pager = diff-so-fancy | less --tabs=4 -RFX

    # prevents the showing of files whose names contain un-versioned, non-ASCII symbols
    # http://michael-kuehnel.de/git/2014/11/21/git-mac-osx-and-german-umlaute.html
    precomposeunicode = false

    quotepath = false

    # makes `git rebase` safer on macOS
    # http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/
    trustctime = false

	untrackedCache = true

	# treat spaces before tabs and all kinds of trailing whitespace as an error
    # [default] trailing-space: looks for spaces at the end of a line
    # [default] space-before-tab: looks for spaces before tabs at the beginning of a line
    # whitespace = space-before-tab,-indent-with-non-tab,trailing-space
    whitespace = fix,-indent-with-non-tab,trailing-space,cr-at-eol


[credential]
    helper = osxkeychain
    # helper = cache --timeout=3600
[credential "https://source.developers.google.com"]
	helper = gcloud.sh



[delta]
    line-numbers = true
    syntax-theme = Nord



[diff]
    colorMoved = default
    indentHeuristic = true
    # whether and how Git detects renames, defaults to true
    # copies = also will detect copies
    renames = copies
    renameLimit = 8192
    # renameLimit = 999999
    submodule = log
    tool = # ?



[difftool]
    prompt = false



[fetch]
    prune = true



[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true
[filter "media"]
    clean = git-media-clean %f
    smudge = git-media-smudge %f


[gc]
    auto = 0



[gist]
    browse = true
    private = true



# github details
[github]
    user = iods



[grep]
    lineNumber = true



[help]
	autocorrect = 1


[hub]
    protocol = https
    # user = nonrational
    user = iods


[include]
    path = ~/.gitconfig.local



[init]
    # https://github.blog/2020-07-27-highlights-from-git-2-28/#introducing-init-defaultbranch
    defaultBranch = develop
    templateDir = ~/.config/git/template
    templatedir = ~/.git_template


[log]
    date = iso-local
    decorate = auto


[merge]
    conflictstyle = diff3
    ff = false
    keepBackup = false
    log = true
    prompt = true
    tool = # ?



[mergetool]
	keepBackup = false
	prompt = false



[mergetool "meld"]
	cmd = meld "$LOCAL" "$BASE" "$REMOTE" --output "$MERGED"



[pager]
    blame = delta
    diff = delta
    log = delta
    reflog = delta
    show = delta



[pull]
    rebase = false


[push]
    autoSetupRemote = true
    default = simple
    # default = current
    followTags = true
    verbose = true



[rebase]
	instructionFormat = (%an <%ae>) %s



[status]
    short = true
    relativePaths = true



[url "git@github.com:"]
	insteadOf = "gh:"
	pushInsteadOf = "github:"
	pushInsteadOf = "git://github.com/"
[url "git://github.com/"]
	insteadOf = "github:"
[url "git@gist.github.com:"]
	insteadOf = "gst:"
	pushInsteadOf = "gist:"
	pushInsteadOf = "git://gist.github.com/"
[url "git://gist.github.com/"]
	insteadOf = "gist:"
# Any GitHub repo with my username should be checked out r/w by default
# http://rentzsch.tumblr.com/post/564806957/public-but-hackable-git-submodules
[url "git@github.com:iods/"]
  insteadOf = "git://github.com/iods/"


# user information for determining the commit object's author details
[user]
    name = Rye Miller
    email = millerrye17@mgail.com
    signingkey = # ?


