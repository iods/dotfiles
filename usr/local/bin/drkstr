#!bin/bash
# A short description of the script goes here.
#
# Usage:
#  - <command> [OPTION] [ARG]
#
#   ____  ____  ____  ____
#  ||i  |||o  |||d  |||s  |
#  ||___|||___|||___|||___|
#  |/___\|/___\|/_ _\|/___\
#
# Version 00.1.2 [2022-10-31]
# Based on the Google Style Guide: https://google.github.io/styleguide/shell.xml

if ! (return 0 2> /dev/null); then
  # now these will only get enabled if not sourced
  set -o errexit  # exit on most errors (get description)
  set -o nounset  # exit on expansion of unset variables (get description)
  set -o pipefail # use last non-zero exit code in a pipeline (get description)
fi

# ensures the trap handler is inherited or it wont work as expected
set -o errtrace

function usage() {
  local script_name
  script_name="$(basename "$0")"

  cat >&2 <<-EOF

  Command: ${script_name}
  Description: Returns what process is the owner of a provided port.

  Usage:
    ${script_name} [PORT]

  Available Options:
    -h, --help              Print this help menu.
    -v|vv|vvv, --verbose    Increase the verbosity of messages.

  Help:
    Check for ports that are taken when trying to run Magento.

      whohas 8080

    Make sure you have System Preferences closed to not overwrite options.

EOF
  exit 1
}

function err() {

}

function func_one() {}

function main() {
  case "${1-}" in
    -h | --help) usage
    ;;
    *) func_one ;;
  esac
}

main "$@"

set -e

usage() {
  cat << HEREDOC
meatbox
Usage:
  meatbox help       show this screen
  meatbox bootstrap  installs the dependencies required to use commands
  meatbox setup      configure the system as it was a clean operating system,
                     creating core directories, installing drivers and our
                     desired packages, updating our core system packages and
                     applying our customized configuration
  meatbox update     installs & updates our desired packages, our core system
                     packages, and applies any new or updated configuration that
                     may have changed since our last run
HEREDOC
}

log_message() {
  printf "%s" "$*"
}

meatbox_run_script() {
  ctx="$1"
  cmd="$2"

  if [ -f "$MEATBOX_SCRIPTS_DIR/$ctx/$cmd.sh" ]; then
    (cd "$MEATBOX_SCRIPTS_DIR/$ctx" && "./$cmd.sh" -- "$@")
  fi
}

# TODO: implement a better way to pass args through to scripts, or perhaps
# extract kernel detection to a utility function
meatbox_run() {
  kernel="$(uname -s | lowercase)"
  distro=""

  if [ "$kernel" = "linux" ]; then
    # normalize our distro to accomodate for higher level distros like EndeavourOS
    case "$(get-distro-id)" in
      arch|endeavouros) distro="arch" ;;
      alpine) distro="alpine" ;;
      *) echo "meatbox: error - distro is not supported"; exit 1 ;;
    esac
  fi

  meatbox_run_script "$kernel" "$cmd" "$kernel" "$distro"
  meatbox_run_script "$distro" "$cmd" "$kernel" "$distro"
  meatbox_run_script "agnostic" "$cmd" "$kernel" "$distro"
}

meatbox_help() {
  usage
}

meatbox() {
  cmd="$1"

  # probably bad practice, but this avoids any issues where something ends up
  # missing from the path
  # shellcheck source=../.bashrc
  . "$HOME/.bashrc"

  case "$cmd" in
    bootstrap|setup|update)
      start-sudo-loop "$MEATBOX_PASSWORD"
      meatbox_run "$cmd"
      ;;
    *) meatbox_help ;;
  esac
}

meatbox "$@"
